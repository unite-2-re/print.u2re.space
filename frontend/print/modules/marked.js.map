{"version":3,"file":"marked.js","sources":["../../../node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v15.0.6 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\nconst noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nconst other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape: escape$1,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && true) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n"],"names":["changeDefaults","newDefaults","_defaults","edit","regex","opt","source","obj","name","val","valSource","replace","other","caret","RegExp","escape","html","encode","escapeTest","test","escapeReplace","getEscapeReplacement","escapeTestNoEncode","escapeReplaceNoEncode","cleanUrl","href","encodeURI","percentDecode","splitCells","tableRow","count","cells","findPipe","match","offset","str","escaped","curr","split","splitPipe","i","trim","shift","length","at","pop","splice","push","slashPipe","rtrim","c","invert","l","suffLen","charAt","slice","outputLink","cap","link","raw","lexer","rules","title","text","outputLinkReplace","state","inLink","token","type","tokens","inlineTokens","marked","src","markedInstance","parse","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","noopTest","codeRemoveIndent","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","unescapeTest","carriageReturn","spaceLine","notSpaceStart","endingNewline","bull","indent","Math","min","hr","bullet","lheading","getRegex","_paragraph","_blockLabel","def","list","_tag","_comment","paragraph","blockNormal","blockquote","code","fences","heading","newline","table","gfmTable","blockGfm","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","reflink","nolink","inlineNormal","_backpedal","blockSkip","del","reflinkSearch","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","ch","_Tokenizer","options","constructor","this","space","exec","codeBlockStyle","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","listItemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","nextBulletRegex","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","row","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","indexOf","b","level","findClosingBracket","linkLen","links","emStrong","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","inlineText","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","undefined","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","langString","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererFunc","tokenizerFunc","prevTokenizer","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","getDefaults"],"mappings":"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","x_google_ignoreList":[0]}